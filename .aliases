#! /usr/bin/env bash
#
# Aliases (to be used by either bash or zsh)
#

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

alias today='vim `date --iso-8601`.md'

alias gimme='sudo apt-get install'
alias supercp='rsync --rsh='ssh' -av --progress --partial' # (source, dest)

alias grep="grep --color=always"
function ocr {
    convert $1 ocr_img.tiff
    tesseract ocr_img.tiff ocr_output
    rm -f ocr_img.tiff
}

function cdir {
    fn=$1
    if git rev-parse --git-dir > /dev/null 2>&1; then
        fn=${fn#[ab]/}  # Strip Git's leading `a/ or b/`
    fi
    cd `dirname "$fn"`
}

if [ $(which pbcopy > /dev/null) ]
then
    alias pbcopy="xclip"
fi

alias fn='find . -name'
fzf-git-branch() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    git branch --color=always --all --sort=-committerdate |
        grep -v HEAD |
        fzf --height 50% --ansi --no-multi --preview-window right:65% \
            --preview 'git log -n 50 --color=always --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed "s/.* //" <<< {})' |
        sed "s/.* //"
}
fzf-git-checkout() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    local branch

    branch=$(fzf-git-branch)
    if [[ "$branch" = "" ]]; then
        echo "No branch selected."
        return
    fi

    # If branch name starts with 'remotes/' then it is a remote branch. By
    # using --track and a remote branch name, it is the same as:
    # git checkout -b branchName --track origin/branchName
    if [[ "$branch" = 'remotes/'* ]]; then
        git checkout --track $branch
    else
        git checkout $branch;
    fi
}
alias gb='fzf-git-branch'
alias gco='fzf-git-checkout'
alias gg='git g'

alias push="git push && gh pr create -fd && gh pr view -w"

# Search all tracked files & load buffers for matching files
# Start by searching for the expression, which is assumed to be argument 1.
function vgg {
    # xargs flags:
    # -o: Reopen stdin as /dev/tty in the child process before executing vim.
    #     Prevents Vim error "Input is not from a terminal"
    #     (& stdin being messed up after exit)
    # -0: read list will NUL delimiter (handles weird filenames, spaces, special chars)
    git grep --quiet "$@" && git grep --null --name-only "$@" | xargs -o -0 vim -c "/$1"
}

# Search everything but unit tests
function gc {
    git g "$@" -- './*' ':!*test.py' ':!*test_*.py' ':!*.test.js' ':!**/testing/**' ':!*.snap'
}

# Search everything but unit tests & load buffers for matching files
# Start by searching for the expression, which is assumed to be argument 1.
function vgc {
    # xargs flags:
    # -o: Reopen stdin as /dev/tty in the child process before executing vim.
    #     Prevents Vim error "Input is not from a terminal"
    #     (& stdin being messed up after exit)
    # -0: read list will NUL delimiter (handles weird filenames, spaces, special chars)
    gc --quiet "$@" && gc --null --name-only "$@" | xargs -o -0 vim -c "/$1"
}

alias gcd='cd "$(git root)"'

# Run pip *g*lobally for special cases where we do indeed want to install outside a venv
function gpip {
    PIP_REQUIRE_VIRTUALENV="" pip "$@"
}

alias dn='dirname'

alias mux='tmux attach || tmux new'
